name: 'Beta'

on:
  push:
    branches: dev
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout to dev
        uses: actions/checkout@v3

      - name: Get latest version
        uses: InsonusK/get-latest-release@v1.0.1
        id: latest_version
        with:
          myToken: ${{ github.token }}
          exclude_types: draft
          view_top: 1

      - name: Bump version
        run: |
          # src: christian-draeger/increment-semantic-version
          semver() {
            prev_version="$1"; release_type="$2"
            if [[ "$prev_version" == "" ]]; then echo "could not read previous version"; exit 1; fi
            possible_release_types="major feature bug alpha beta rc"
            if [[ ! ${possible_release_types[*]} =~ ${release_type} ]]; then
              echo "valid argument: [ ${possible_release_types[*]} ]"; exit 1; fi
            major=0; minor=0; patch=0; pre=""; preversion=0
            regex="^([0-9]+).([0-9]+).([0-9]+)((-[a-z]+)([0-9]+))?$"
            if [[ $prev_version =~ $regex ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
              pre="${BASH_REMATCH[5]}"
              preversion="${BASH_REMATCH[6]}"
            else echo "previous version '$prev_version' is not a semantic version"; exit 1; fi
            case "$release_type" in
            "major") ((++major)); minor=0; patch=0; pre="";;
            "feature") ((++minor)); patch=0; pre="";;
            "bug") ((++patch)); pre="";;
            "alpha") if [[ -z "$preversion" ]]; then preversion=0; else
              if [[ "$pre" != "-alpha" ]]; then preversion=1; else ((++preversion)); fi; fi
              pre="-alpha$preversion";;
            "beta") if [[ -z "$preversion" ]]; then preversion=0; else
              if [[ "$pre" != "-beta" ]]; then preversion=1; else ((++preversion)); fi; fi
              pre="-beta$preversion";;
            "rc") if [[ -z "$preversion" ]]; then preversion=0; else
              if [[ "$pre" != "-rc" ]]; then preversion=1; else ((++preversion)); fi; fi
              pre="-rc$preversion";;
            esac; echo ${major}.${minor}.${patch}${pre}; }
          LATEST_VERSION=${{ steps.latest_version.outputs.tag_name }}
          if [[ $LATEST_VERSION != *"beta"* ]]; then NEXT_VERSION=$(semver $LATEST_VERSION bug)
          else NEXT_VERSION=$LATEST_VERSION; fi; echo "VERSION=$(semver $NEXT_VERSION beta)" >> $GITHUB_ENV

      - name: Restore license
        run: |
          mkdir -v app/src/main/java/website/leifs/delta/licenses && cd $_
          echo -e "${{ secrets.LICENSE_JAVA }}" | base64 -d > License.java

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build APK
        run: bash gradlew assembleRelease

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEYSTORE_BASE64 }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          alias: ${{ secrets.KEYSTORE_KEY_ALIAS }}

      - name: Rename APK
        run: mv -v ${{ env.SIGNED_RELEASE_FILE }} delta-${{ env.VERSION }}.apk

      - name: Upload APK in artifacts
        uses: actions/upload-artifact@v3
        with:
          name: delta-${{ env.VERSION }}
          path: delta-${{ env.VERSION }}.apk
          retention-days: 30

      - name: Create pre-release
        uses: softprops/action-gh-release@v1
        with:
          files: delta-${{ env.VERSION }}.apk
          prerelease: true
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}